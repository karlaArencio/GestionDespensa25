@page "/api/Categorias"

@inject IHttpServicio http

<h3>Lista de categorias</h3>
<br/>
<a class="btn btn-primary" href="/api/Categorias/Crear">Nueva Categoria</a>
<br/>
<table>
    <tr>
        <th>NombreCategoria</th>
    </tr>
    @if(Mensaje=="")
    {
        @if (listaCategorias == null)
        {
            <p>Buscando....</p>
        }
        else if(listaCategorias.Count == 0)
        {
            <p>No existen listas de categorias</p>
        }
        else
        {
            @foreach (var item in listaCategorias)
            {
               <tr>
                    <td>@item.NombreCategoria</td>
                    <td>
                        <a class="btn btn-primary"
                           href="api/Categorias/editar/@item.Id">
                            Editar
                        </a>
                    </td>
                    <td>
                        <button class="btn btn-danger"
                           @onclick="()=>Eliminar(item)">
                            Borrar
                        </button>
                    </td>

               </tr>
            }
        }
    }
    else
    {
        <p>Error: @Mensaje</p>
    }
</table>

<Confirmacion @ref="confirmacion"
    onCancel="Cancelar"
    onConfirm="Borrar">
    <h5>Está por borrar la categoria</h5>
    <br/>
    <p>Está seguro?</p>
</Confirmacion> 

@code {
    Confirmacion confirmacion;

    List<Categoria> listaCategorias;
    Categoria categoria;
    string Mensaje = "";

    Categoria? cateBorrar = null;

    protected override async Task OnInitializedAsync()  //override: sobreescribir
    {
        await base.OnInitializedAsync(); //await es cada ves que va asincrono
        await Leer();
    }   

    private async Task Leer()
    {
        var resp = await http.Get<List<Categoria>>("/api/Categorias");
        if(!resp.Error)
        {
            listaCategorias = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }

    }

    private async Task Eliminar(Categoria categoria)
    {
        cateBorrar = categoria;
        confirmacion.Ver();
    }

    private void  Cancelar()
    {
        confirmacion.Ocultar();
        cateBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Categorias/{cateBorrar.Id}");
        if (respuesta.Error)
        {
            var body = "No se pudo borrar";
        }
        Cancelar();
        await Leer();
    }

}
